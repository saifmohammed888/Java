Design Patterns - These are special design methods used to implement java oops project.
				 	It is an abstract topic,helping solve certain design problems while coding.
					The gang of wars were the authors of design patterns who broke down patterns into 3 types
	
1. Creational Patterns - Singleton, Builder, Prototype, Factory and Abstract Factory.

a. Singleton Desing Patterns: It is a widely used design pattern due to simplicity and performance.
		Only one single instance will be created using singleton design patterns.
		It guarantess control of resource - and lazy loading ex - runtime, logger, Beans, graphics manager.
		Singleton is static by itself,it has a private object and a constructor and a public method.
		
		-> Lazy loading - Loading the object with values only when called.
		-> Thread safing - Making the objects available only for a single thread or blocking access to multiple threads.(volatile class)
		-> PitFalls - Overused and unnessary sometimes.
	
b. Builder Design Pattern -  It is used to create constructors with lots of arguments.
		-> Handles complex constructors, large parameters, Immutability Ex - StringBuilder, DocumentBuilder
		-> The builder pattern has ability to handle multiple constructors by determing what constructor to create by creating constructors
			based on objects rather than values, Generics helps improve builder patterns.
		-> They provide immutability, complexity is increases but features added are worth it.
		
c. Prototype pattern - It is used to get unique instance of same object, to avoid costly creation, the sub instances are cloned rather
	than created using new. implemented with a registry.
		-> Instead of creating an expensive instance using new we could have the same object with unique id when cloned.
		-> It implements the instance clonable which then has to override the clone method to give the implementation
			basically an object required for different purpuse can be cloned and used instead of new creation.
			
d. Factory Method: It is the second most used and opposite to singleton creation pattern.
		-> They dont exponse instantiation logic to the user, by deferring subclass. ex Calender, number format.
		-> They create and manage objects and helps in referencing objects,also they create methods.
		-> It is parameter driven construction, its complex in implementation. Ex Website, Blog getting different objects.
	
e. Abstract Factory: it is a factory of factory, it is factory of related objects, they defer subclass. Ex- Document Builder Factory
		->
			

2. Structural Design Pattern: It is based on utilization of objects and memory management etc.
	
a. Adapter : It is used when a legacy code is interfaced with new code, to adapt the features we use the adapter design pattern.
		Ex: Iphone adapter with universal headphone jack. 
		Ex: Arrays, Adapting  array into list.
		It allows client to integrate with the code based on some interface, Like api with legacy code.
		Adapter can provide multiple adapters.
		
b. 	Bridge : It is similar to adapter but bridge helps in interfacing between new code, they help in decouple abstraction
		ex: Driver, JDBC driver they do not break functionality for client even when interface is being changed.
		